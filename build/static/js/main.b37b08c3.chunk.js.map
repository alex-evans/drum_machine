{"version":3,"sources":["components/hearder.jsx","components/footer.jsx","components/display.jsx","components/drumPad.jsx","redux/actions.js","redux/actionTypes.js","components/drumPadsBox.jsx","components/drumMachine.jsx","App.js","serviceWorker.js","redux/reducers/drums.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Header","id","Footer","Display","this","props","name","React","Component","connect","state","DrumPad","handleKeyPress","bind","handleDrumClick","document","addEventListener","drumId","getElementById","play","drumPlayed","event","key","toUpperCase","padId","playDrum","target","value","className","onClick","src","sound","type","DrumPadsBox","DrumMachine","App","Boolean","window","location","hostname","match","drums","initialState","action","drum_name","createStore","rootReducer","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b37b08c3.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return (\n        <header>\n            <nav id='header'>\n                <h1>\n                    Drum Machine\n                </h1>\n            </nav>\n        </header>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Footer() {\n    return (\n        <footer>\n            <div id=\"footer\">\n                <h3>Made By: Alex Evans</h3>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Display extends React.Component {\n    render() {\n        return (\n            <div id=\"display-box\">\n                <div id=\"display\">\n                    {this.props.name}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return state\n}\n\nexport default connect(mapStateToProps, null)(Display);","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { drumPlayed } from \"../redux/actions\";\n\n\nclass DrumPad extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n        this.handleDrumClick = this.handleDrumClick.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyPress);\n    }\n\n    playDrum(drumId) {\n        document.getElementById(drumId).play()\n        this.props.drumPlayed(drumId)\n    }\n\n    handleKeyPress(event) {\n        if(event.key.toUpperCase() === this.props.padId) {\n            this.playDrum(this.props.padId)\n        }\n    }\n\n    handleDrumClick(event) {\n        this.playDrum(event.target.value)\n    }\n\n    render() {\n        return (\n            <div className=\"drum-pad\" id=\"pad-{{this.props.padId}}\">\n                <button onClick={this.handleDrumClick} value={this.props.padId}>{this.props.padId}\n                    <audio className=\"clip\" id={this.props.padId} src={this.props.sound}></audio>\n                </button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return state\n}\n\nexport default connect(mapStateToProps, { drumPlayed })(DrumPad);","import { DRUM_PLAYED } from \"./actionTypes\";\n\nexport const drumPlayed = drumId => ({\n    type: DRUM_PLAYED,\n    drumPlayed: drumId\n});","export const DRUM_PLAYED = \"DRUM_PLAYED\";","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport DrumPad from \"./drumPad\";\n\nclass DrumPadsBox extends React.Component {\n    render() {\n        return (\n            <div id=\"drum-pads-box\">\n                <DrumPad padId=\"Q\" sound=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\" />\n                <DrumPad padId=\"W\" sound=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\" />\n                <DrumPad padId=\"E\" sound=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\" />\n                <DrumPad padId=\"A\" sound=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\" />\n                <DrumPad padId=\"S\" sound=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\" />\n                <DrumPad padId=\"D\" sound=\"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\" />\n                <DrumPad padId=\"Z\" sound=\"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\" />\n                <DrumPad padId=\"X\" sound=\"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\" />\n                <DrumPad padId=\"C\" sound=\"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\" />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return state\n}\n\nexport default connect(mapStateToProps, null)(DrumPadsBox);","import React from \"react\";\nimport Display from \"./display\";\nimport DrumPadsBox from \"./drumPadsBox\";\n\nclass DrumMachine extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    render() {\n        return (\n            <main id=\"drum-machine\">\n                <Display />\n                <DrumPadsBox />\n            </main>\n        )\n    }\n}\n\nexport default DrumMachine;","import React from 'react';\nimport './App.scss';\nimport Header from \"./components/hearder\";\nimport Footer from \"./components/footer\";\nimport DrumMachine from \"./components/drumMachine\";\n\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <Header />\n      <DrumMachine />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { DRUM_PLAYED } from \"../actionTypes\";\n\nconst drums = {\n    'Q': 'Heater 1',\n    'W': 'Heater 2',\n    'E': 'Heater 3',\n    'A': 'Heater 4',\n    'S': 'Clap',\n    'D': 'Open HH',\n    'Z': 'Kick-n Hat',\n    'X': 'Side Stick',\n    'C': 'Closed HH'\n};\n\nconst initialState = {\n    name: 'No Drum Played'\n}\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case DRUM_PLAYED: {\n            const drum_name = drums[action.drumPlayed]\n            return {\n                name: drum_name\n            }\n        };\n        default:\n            return state;\n    }\n};","// import { combineReducers } from \"redux\";\nimport drums from \"./drums\";\n\nexport default drums;","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}